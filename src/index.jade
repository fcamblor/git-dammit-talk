doctype html
html
  head
    meta(charset='utf-8')
    meta(name='viewport', content='width=device-width, initial-scale=1, maximum-scale=1')
    title Git dammit!

    link(rel='stylesheet', type='text/css', href='build/build.css')

  body

    article

      section.hell-text(data-bespoke-backdrop='hell')
        h1 Git Dammit!
        
      // Modifier dernier commit
      section.quote-text(data-bespoke-backdrop='quote')
        p J'ai besoin de modifier mon dernier commit.

      section
        ul
          li: pre: code.language-shell $ git commit --amend
          li: pre: code.language-shell $ git commit --amend --no-edit

      section
        ul.inline
          li: img(src='images/simple-branch.svg')
          li: img(src='images/simple-branch-amended.svg')

            
      // Modifier, pas le dernier (fixup)
      section.quote-text(data-bespoke-backdrop='quote')
        ul.block
          li: p Celui que je dois modifier n'est pas le dernier...
          li.centered.double: img(src='images/simple-branch-light.svg')

      section
        ul.block
          li: pre: code.language-shell $ git commit --fixup {sha1-A}
          li.triple.centered: img(src='images/fixup-branch.svg')

      section.bd-tilde-text(data-bespoke-backdrop='bd-tilde')
        ul.block
          li: pre: code.language-shell $ git rebase -i {sha1-A}~ --autosquash
          li.triple.notbullet
            ul.inline
              li: img(src='images/fixup-branch-squashed.svg')
              li: img(src='images/fixup-branch-squashed-end.svg')
      
      section
        ul
          li: pre: code.language-shell $ git push -f origin ma-branche


      // J'ai modifié mes commits, puis j'ai pull
      section.quote-text(data-bespoke-backdrop='quote')
        p Oups, J'ai modifié mes commits, et puis j'ai fait un pull.
        p.subquote Je me retrouve avec des commits en double :(

      section
        ul.inline
          li: img(src='images/local-branch-amended.svg')
          li: img(src='images/remote-branch.svg')

      section
        ul.inline
          li: img(src='images/merged-branch-wrong.svg')
          li: img(src='images/rebased-branch-wrong.svg')

      section
        ul
          li: pre: code.language-shell $ git push -f origin ma-branche

      // Abandonner mes modifications
      section.quote-text(data-bespoke-backdrop='quote')
        p Je veux abandonner mes modifications…
        p.subquote …et revenir à la version du repository distant
      
      section
        ul.block
          li.triple: img(src='images/local-vs-remote-branches.svg')
          li: pre: code.language-shell
            | $ git fetch origin ma-branche
            | $ git reset --hard origin/ma-branche

      section
        img(src='images/pull-vs-fetch-merge.svg')
        
        
      // Supprimer le dernier commit
      section.quote-text(data-bespoke-backdrop='quote')
        p Je veux supprimer mon dernier commit.
        
      section
        img(src='images/git-index-initial-state.svg')
      section
        img(src='images/git-index-initial-state-status.svg')
      section
        img(src='images/git-index-added-file.svg')
      section
        img(src='images/git-index-reset-file.svg')
      section
        img(src='images/git-index-added-file.svg')
      section
        img(src='images/git-index-committed-file.svg')
          
      section
        ul
          li: pre: code.language-shell $ git reset HEAD~ --soft
          li: pre: code.language-shell
            | $ git reset HEAD~ --mixed
            | $ git reset HEAD~
          li: pre: code.language-shell $ git reset HEAD~ --hard

      section
        img(src='images/reset-initial-state.svg')
      section
        img(src='images/reset-soft.svg')
      section
        img(src='images/reset-mixed.svg')
      section
        img(src='images/reset-hard.svg')

      // Revenir sur la branche précédente
      section.quote-text(data-bespoke-backdrop='quote')
        p Je veux revenir sur la branche sur laquelle j'étais juste avant

      section
        ul: li: pre: code.language-shell $ git checkout -


      // git add -p
      section.quote-text(data-bespoke-backdrop='quote')
        p Je veux séparer les modifications d'un même fichier dans deux commits différents.

      section
        ul
          li: pre: code.language-shell $ git add -p
          li: pre: code.language-shell $ git reset -p


      // git status, git diff...
      section.quote-text(data-bespoke-backdrop='quote')
        p Comment voir les modifications en cours ?

      section
        h2 Modifications &laquo; unstaged &raquo;
        pre: code.language-shell $ git diff

      section
        h2 Modifications &laquo; staged &raquo;
        pre: code.language-shell
            | $ git diff --cached
            | $ git diff --staged
        
      section
        h2 Toutes les modifications
        pre: code.language-shell $ git diff HEAD

      section.quote-text(data-bespoke-backdrop='quote')
        p Je veux annuler les modifications faites sur un fichier en particulier

      section
        pre: code.language-shell $ git checkout -- monFichier.ext

      section.quote-text(data-bespoke-backdrop='quote')
        p TODO git rebase --onto

      section.quote-text(data-bespoke-backdrop='quote')
        p TODO git reflog

    script(src='build/build.js')
