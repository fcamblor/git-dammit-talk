doctype html
html
  head
    meta(charset='utf-8')
    meta(name='viewport', content='width=device-width, initial-scale=1, maximum-scale=1')
    title Git dammit!

    link(rel='stylesheet', type='text/css', href='build/build.css')

  body

    article

      section.hell-text(data-bespoke-backdrop='hell')
        h1 Git Dammit!
        
      // Modifier dernier commit
      section(data-bespoke-backdrop='quote-bg')
        .quote J'ai besoin de modifier mon dernier commit.

      section
        ul
          li
            pre: code.language-git
              | # Le contenu et le nom
              | git commit --amend
          li
            pre: code.language-git
              | # Le contenu seulement
              | git commit --amend --no-edit

      section
        ul.row
          li: img(src='images/simple-branch.svg')
          li: img(src='images/simple-branch-amended.svg')
          
      section
        ul
          li: pre: code.language-git
            | # Bien entendu il faudra &laquo; force push &raquo;
            | git push -f origin ma-branche

            
      // Modifier, pas le dernier (fixup)
      section(data-bespoke-backdrop='quote-bg')
        ul.column
          li.notbullet: .quote Celui que je dois modifier n'est pas le dernier...
          li.centered.double: img(src='images/simple-branch-light.svg')

      section
        ul.column
          li
            pre: code.language-git
              | # 1. Je fais un commit de fixup
              | git commit --fixup {sha1-A}
          li.double.centered: img(src='images/fixup-branch.svg')

      section.bd-tilde-text(data-bespoke-backdrop='bd-tilde')
        ul.column
          li: pre: code.language-git
            | # 2. Je rebase
            | git rebase -i {sha1-A}~ <b>--autosquash</b>
          li.triple.notbullet
            ul.row
              li: img(src='images/fixup-branch-squashed.svg')
              li: img(src='images/fixup-branch-squashed-end.svg')

              
      // J'ai modifié mes commits, puis j'ai pull
      section(data-bespoke-backdrop='quote-bg')
        .quote Oups, J'ai modifié mes commits, et puis j'ai fait un pull.
        .subquote Je me retrouve avec des commits en double :(

      section
        ul.column
          li.notbullet
            h2.centered Que s'est-il passé ?
          li.triple
            ul.row
              li: img(src='images/local-branch-amended.svg')
              li: img(src='images/remote-branch.svg')

      section
        ul.column
          li.notbullet
            h2.centered Aïe&#8230;
          li.quintuple.notbullet
            ul.row
              li.notbullet
                img(src='images/merged-branch-wrong.svg')
              li.notbullet
                img(src='images/rebased-branch-wrong.svg')

      section
        ul
          li: pre: code.language-git
            | # Il fallait &laquo; force push &raquo;&#8230;
            | git push -f origin ma-branche

      // Abandonner mes modifications
      section(data-bespoke-backdrop='quote-bg')
        .quote Je veux abandonner mes modifications…
        .subquote …et revenir à la version du repository distant.
      
      section
        img(src='images/local-vs-remote-branches.svg')

      section
        h2 Pull ? Fetch ?
        img(src='images/pull-vs-fetch-merge.svg')
        
      section
        ul.column
          li.notbullet.triple: img(src='images/local-vs-remote-branches.svg')
          li.notbullet: pre: code.language-git
            | git fetch origin ma-branche
            | git reset --hard origin/ma-branche
        
        
      // Supprimer le dernier commit
      section(data-bespoke-backdrop='quote-bg')
        .quote Je veux supprimer mon dernier commit.
        
      section
        img(src='images/git-index-initial-state.svg')
      section
        img(src='images/git-index-initial-state-status.svg')
      section
        img(src='images/git-index-added-file.svg')
      section
        img(src='images/git-index-reset-file.svg')
      section
        img(src='images/git-index-added-file.svg')
      section
        img(src='images/git-index-committed-file.svg')
          
      section
        ul
          li: pre: code.language-git
            | # On ne prend pas trop de risques
            | git reset HEAD~ --soft
          li: pre: code.language-git
            | # Les deux sont équivalents
            | git reset HEAD~ --mixed
            | git reset HEAD~
          li: pre: code.language-git
            | # Bourrin
            | git reset HEAD~ --hard

      section
        img(src='images/reset-initial-state.svg')
      section
        img(src='images/reset-soft.svg')
      section
        img(src='images/reset-mixed.svg')
      section
        img(src='images/reset-hard.svg')

      // Revenir sur la branche précédente
      section(data-bespoke-backdrop='quote-bg')
        .quote Je veux revenir sur la branche sur laquelle j'étais juste avant.

      section
        ul: li: pre: code.language-git
          | # Comme "cd -" en shell !
          | git checkout -


      // git add -p
      section(data-bespoke-backdrop='quote-bg')
        .quote Je veux séparer les modifications d'un même fichier dans deux commits différents.

      section
        ul
          li
            pre: code.language-git
              | # pour indexer des modifications
              | git add -p
          li
            pre: code.language-git
              | # Dans l'autre sens
              | git reset -p

      // git status, git diff...
      section(data-bespoke-backdrop='quote-bg')
        .quote Comment voir les modifications en cours ?

      section
        ul
          li
            pre: code.language-git
              | # Modifications &laquo; unstaged &raquo;
              | git diff
          li
            pre: code.language-git
              | # Modifications &laquo; staged &raquo;
              | git diff --cached
              | git diff --staged
          li
            pre: code.language-git
              | # Toutes les modifications
              | git diff HEAD
        
      section(data-bespoke-backdrop='quote-bg')
        .quote Je veux annuler les modifications faites sur un fichier en particulier.

      section
        pre: code.language-git
          | # Tout ce qui suit le "--" est considéré comme un nom de fichier 
          | git checkout -- monFichier.ext

      section(data-bespoke-backdrop='quote-bg')
        .quote Je me suis basé sur une autre branche que master pour développer ma feature
        .subquote Je n'avais pas le choix&#8230;
          
      section
        ul.row
          li: img(src='images/rebase-onto-initial.svg')
          li: img(src='images/rebase-onto-new-branch.svg')
          
      section
        ul.row
          li: img(src='images/rebase-onto-merged-not-rewritten.svg')
          li: img(src='images/rebase-onto-merged-rewritten.svg')
          
      section
        ul.column
          li.triple.centered: img(src='images/rebase-onto-target.svg')
          li: pre: code.language-git
            | # On n'oublie pas le ~ tilde ~ !
            | git rebase {sha1-E}~ --onto master
          
      
        
    script(src='build/build.js')
